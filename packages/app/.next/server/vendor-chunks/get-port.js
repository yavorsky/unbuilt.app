"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-port";
exports.ids = ["vendor-chunks/get-port"];
exports.modules = {

/***/ "(action-browser)/../../node_modules/get-port/index.js":
/*!********************************************!*\
  !*** ../../node_modules/get-port/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! net */ \"net\");\n\nclass Locked extends Error {\n\tconstructor(port) {\n\t\tsuper(`${port} is locked`);\n\t}\n}\n\nconst lockedPorts = {\n\told: new Set(),\n\tyoung: new Set()\n};\n\n// On this interval, the old locked ports are discarded,\n// the young locked ports are moved to old locked ports,\n// and a new young set for locked ports are created.\nconst releaseOldLockedPortsIntervalMs = 1000 * 15;\n\n// Lazily create interval on first use\nlet interval;\n\nconst getAvailablePort = options => new Promise((resolve, reject) => {\n\tconst server = net.createServer();\n\tserver.unref();\n\tserver.on('error', reject);\n\tserver.listen(options, () => {\n\t\tconst {port} = server.address();\n\t\tserver.close(() => {\n\t\t\tresolve(port);\n\t\t});\n\t});\n});\n\nconst portCheckSequence = function * (ports) {\n\tif (ports) {\n\t\tyield * ports;\n\t}\n\n\tyield 0; // Fall back to 0 if anything else failed\n};\n\nmodule.exports = async options => {\n\tlet ports;\n\n\tif (options) {\n\t\tports = typeof options.port === 'number' ? [options.port] : options.port;\n\t}\n\n\tif (interval === undefined) {\n\t\tinterval = setInterval(() => {\n\t\t\tlockedPorts.old = lockedPorts.young;\n\t\t\tlockedPorts.young = new Set();\n\t\t}, releaseOldLockedPortsIntervalMs);\n\n\t\t// Does not exist in some environments (Electron, Jest jsdom env, browser, etc).\n\t\tif (interval.unref) {\n\t\t\tinterval.unref();\n\t\t}\n\t}\n\n\tfor (const port of portCheckSequence(ports)) {\n\t\ttry {\n\t\t\tlet availablePort = await getAvailablePort({...options, port}); // eslint-disable-line no-await-in-loop\n\t\t\twhile (lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)) {\n\t\t\t\tif (port !== 0) {\n\t\t\t\t\tthrow new Locked(port);\n\t\t\t\t}\n\n\t\t\t\tavailablePort = await getAvailablePort({...options, port}); // eslint-disable-line no-await-in-loop\n\t\t\t}\n\n\t\t\tlockedPorts.young.add(availablePort);\n\t\t\treturn availablePort;\n\t\t} catch (error) {\n\t\t\tif (!['EADDRINUSE', 'EACCES'].includes(error.code) && !(error instanceof Locked)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new Error('No available ports found');\n};\n\nmodule.exports.makeRange = (from, to) => {\n\tif (!Number.isInteger(from) || !Number.isInteger(to)) {\n\t\tthrow new TypeError('`from` and `to` must be integer numbers');\n\t}\n\n\tif (from < 1024 || from > 65535) {\n\t\tthrow new RangeError('`from` must be between 1024 and 65535');\n\t}\n\n\tif (to < 1024 || to > 65536) {\n\t\tthrow new RangeError('`to` must be between 1024 and 65536');\n\t}\n\n\tif (to < from) {\n\t\tthrow new RangeError('`to` must be greater than or equal to `from`');\n\t}\n\n\tconst generator = function * (from, to) {\n\t\tfor (let port = from; port <= to; port++) {\n\t\t\tyield port;\n\t\t}\n\t};\n\n\treturn generator(from, to);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvZ2V0LXBvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixZQUFZLG1CQUFPLENBQUMsZ0JBQUs7O0FBRXpCO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLE1BQU07QUFDZjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLGlCQUFpQixHQUFHO0FBQ25FO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxpQkFBaUIsR0FBRztBQUNoRTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdW5idWlsdC9hcHAvLi4vLi4vbm9kZV9tb2R1bGVzL2dldC1wb3J0L2luZGV4LmpzPzk0MmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5cbmNsYXNzIExvY2tlZCBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IocG9ydCkge1xuXHRcdHN1cGVyKGAke3BvcnR9IGlzIGxvY2tlZGApO1xuXHR9XG59XG5cbmNvbnN0IGxvY2tlZFBvcnRzID0ge1xuXHRvbGQ6IG5ldyBTZXQoKSxcblx0eW91bmc6IG5ldyBTZXQoKVxufTtcblxuLy8gT24gdGhpcyBpbnRlcnZhbCwgdGhlIG9sZCBsb2NrZWQgcG9ydHMgYXJlIGRpc2NhcmRlZCxcbi8vIHRoZSB5b3VuZyBsb2NrZWQgcG9ydHMgYXJlIG1vdmVkIHRvIG9sZCBsb2NrZWQgcG9ydHMsXG4vLyBhbmQgYSBuZXcgeW91bmcgc2V0IGZvciBsb2NrZWQgcG9ydHMgYXJlIGNyZWF0ZWQuXG5jb25zdCByZWxlYXNlT2xkTG9ja2VkUG9ydHNJbnRlcnZhbE1zID0gMTAwMCAqIDE1O1xuXG4vLyBMYXppbHkgY3JlYXRlIGludGVydmFsIG9uIGZpcnN0IHVzZVxubGV0IGludGVydmFsO1xuXG5jb25zdCBnZXRBdmFpbGFibGVQb3J0ID0gb3B0aW9ucyA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdGNvbnN0IHNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKTtcblx0c2VydmVyLnVucmVmKCk7XG5cdHNlcnZlci5vbignZXJyb3InLCByZWplY3QpO1xuXHRzZXJ2ZXIubGlzdGVuKG9wdGlvbnMsICgpID0+IHtcblx0XHRjb25zdCB7cG9ydH0gPSBzZXJ2ZXIuYWRkcmVzcygpO1xuXHRcdHNlcnZlci5jbG9zZSgoKSA9PiB7XG5cdFx0XHRyZXNvbHZlKHBvcnQpO1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuXG5jb25zdCBwb3J0Q2hlY2tTZXF1ZW5jZSA9IGZ1bmN0aW9uICogKHBvcnRzKSB7XG5cdGlmIChwb3J0cykge1xuXHRcdHlpZWxkICogcG9ydHM7XG5cdH1cblxuXHR5aWVsZCAwOyAvLyBGYWxsIGJhY2sgdG8gMCBpZiBhbnl0aGluZyBlbHNlIGZhaWxlZFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBvcHRpb25zID0+IHtcblx0bGV0IHBvcnRzO1xuXG5cdGlmIChvcHRpb25zKSB7XG5cdFx0cG9ydHMgPSB0eXBlb2Ygb3B0aW9ucy5wb3J0ID09PSAnbnVtYmVyJyA/IFtvcHRpb25zLnBvcnRdIDogb3B0aW9ucy5wb3J0O1xuXHR9XG5cblx0aWYgKGludGVydmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdGxvY2tlZFBvcnRzLm9sZCA9IGxvY2tlZFBvcnRzLnlvdW5nO1xuXHRcdFx0bG9ja2VkUG9ydHMueW91bmcgPSBuZXcgU2V0KCk7XG5cdFx0fSwgcmVsZWFzZU9sZExvY2tlZFBvcnRzSW50ZXJ2YWxNcyk7XG5cblx0XHQvLyBEb2VzIG5vdCBleGlzdCBpbiBzb21lIGVudmlyb25tZW50cyAoRWxlY3Ryb24sIEplc3QganNkb20gZW52LCBicm93c2VyLCBldGMpLlxuXHRcdGlmIChpbnRlcnZhbC51bnJlZikge1xuXHRcdFx0aW50ZXJ2YWwudW5yZWYoKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKGNvbnN0IHBvcnQgb2YgcG9ydENoZWNrU2VxdWVuY2UocG9ydHMpKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCBhdmFpbGFibGVQb3J0ID0gYXdhaXQgZ2V0QXZhaWxhYmxlUG9ydCh7Li4ub3B0aW9ucywgcG9ydH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWF3YWl0LWluLWxvb3Bcblx0XHRcdHdoaWxlIChsb2NrZWRQb3J0cy5vbGQuaGFzKGF2YWlsYWJsZVBvcnQpIHx8IGxvY2tlZFBvcnRzLnlvdW5nLmhhcyhhdmFpbGFibGVQb3J0KSkge1xuXHRcdFx0XHRpZiAocG9ydCAhPT0gMCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBMb2NrZWQocG9ydCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhdmFpbGFibGVQb3J0ID0gYXdhaXQgZ2V0QXZhaWxhYmxlUG9ydCh7Li4ub3B0aW9ucywgcG9ydH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWF3YWl0LWluLWxvb3Bcblx0XHRcdH1cblxuXHRcdFx0bG9ja2VkUG9ydHMueW91bmcuYWRkKGF2YWlsYWJsZVBvcnQpO1xuXHRcdFx0cmV0dXJuIGF2YWlsYWJsZVBvcnQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmICghWydFQUREUklOVVNFJywgJ0VBQ0NFUyddLmluY2x1ZGVzKGVycm9yLmNvZGUpICYmICEoZXJyb3IgaW5zdGFuY2VvZiBMb2NrZWQpKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcignTm8gYXZhaWxhYmxlIHBvcnRzIGZvdW5kJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5tYWtlUmFuZ2UgPSAoZnJvbSwgdG8pID0+IHtcblx0aWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGZyb20pIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHRvKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bmcm9tYCBhbmQgYHRvYCBtdXN0IGJlIGludGVnZXIgbnVtYmVycycpO1xuXHR9XG5cblx0aWYgKGZyb20gPCAxMDI0IHx8IGZyb20gPiA2NTUzNSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdgZnJvbWAgbXVzdCBiZSBiZXR3ZWVuIDEwMjQgYW5kIDY1NTM1Jyk7XG5cdH1cblxuXHRpZiAodG8gPCAxMDI0IHx8IHRvID4gNjU1MzYpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignYHRvYCBtdXN0IGJlIGJldHdlZW4gMTAyNCBhbmQgNjU1MzYnKTtcblx0fVxuXG5cdGlmICh0byA8IGZyb20pIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignYHRvYCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgZnJvbWAnKTtcblx0fVxuXG5cdGNvbnN0IGdlbmVyYXRvciA9IGZ1bmN0aW9uICogKGZyb20sIHRvKSB7XG5cdFx0Zm9yIChsZXQgcG9ydCA9IGZyb207IHBvcnQgPD0gdG87IHBvcnQrKykge1xuXHRcdFx0eWllbGQgcG9ydDtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIGdlbmVyYXRvcihmcm9tLCB0byk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/get-port/index.js\n");

/***/ })

};
;