name: Test, Deploy and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ID: ${{ secrets.SUPABASE_ID }}
      UNBUILT_API_KEY: ${{ secrets.UNBUILT_API_KEY }}
      LOGFLARE_SOURCE_TOKEN: ${{ secrets.LOGFLARE_SOURCE_TOKEN }}
      LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}
      CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install Yarn
        run: npm install -g yarn@1.22.19

      - name: Install dependencies
        run: yarn install

      - name: Install playwright
        run: yarn playwright install --with-deps

      - name: Build application (main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: yarn turbo run build

      - name: Build packages and CLI only (PR)
        if: github.event_name == 'pull_request'
        run: yarn turbo run build --filter="./packages/*" --filter="@unbuilt/cli"

      - name: Run lint
        run: yarn lint

      - name: Run tests
        run: yarn test
        env:
          NODE_ENV: test

      # Archive the build artifacts for deployment
      - name: Archive build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          tar -czf build-artifacts.tar.gz apps/web/.next apps/web/public node_modules package.json yarn.lock ecosystem.config.cjs

      # Upload build artifacts
      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts.tar.gz
          retention-days: 1

  publish-cli:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install

      - name: Build CLI package
        run: yarn turbo run build --filter=@unbuilt/cli

      - name: Check version change
        id: check-version
        run: |
          # Get the package name and current version from package.json
          CLI_PACKAGE_PATH="apps/cli/package.json"
          PACKAGE_NAME=$(node -p "require('./${CLI_PACKAGE_PATH}').name")
          CURRENT_VERSION=$(node -p "require('./${CLI_PACKAGE_PATH}').version")

          echo "Package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"

          # Check if the package exists on npm
          # Get the latest version from npm
          NPM_VERSION=$(npm view $PACKAGE_NAME version --silent)
          echo "Latest npm version: $NPM_VERSION"

          # Compare versions
          if [ "$CURRENT_VERSION" != "$NPM_VERSION" ]; then
            echo "Version changed from $NPM_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-version.outputs.version_changed == 'true'
        working-directory: apps/cli
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.check-version.outputs.new_version }}
          release_name: CLI v${{ steps.check-version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            Release of @unbuilt/cli version ${{ steps.check-version.outputs.new_version }}

            ## What's Changed
            * Published CLI package to npm

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ID: ${{ secrets.SUPABASE_ID }}
      UNBUILT_API_KEY: ${{ secrets.UNBUILT_API_KEY }}
      LOGFLARE_SOURCE_TOKEN: ${{ secrets.LOGFLARE_SOURCE_TOKEN }}
      LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}
      CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # Prepare for artifact transfer

      # Use SCP via SSH Action to transfer artifacts
      - name: Transfer artifacts to DigitalOcean
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "build-artifacts.tar.gz"
          target: "/home/server/unbuilt-app/"

      # Deploy on server
      - name: Deploy on DigitalOcean
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: SUPABASE_URL,SUPABASE_KEY,SUPABASE_ID,LOGFLARE_SOURCE_TOKEN,LOGFLARE_API_KEY,CLARITY_PROJECT_ID,UNBUILT_API_KEY
          script: |
            set -e # Exit if fail
            cd /home/server/unbuilt-app && \
            # Create .env file
            echo "SUPABASE_URL=${SUPABASE_URL}" > .env && \
            echo "SUPABASE_KEY=${SUPABASE_KEY}" >> .env && \
            echo "SUPABASE_ID=${SUPABASE_ID}" >> .env && \
            echo "LOGFLARE_SOURCE_TOKEN=${LOGFLARE_SOURCE_TOKEN}" >> .env && \
            echo "LOGFLARE_API_KEY=${LOGFLARE_API_KEY}" >> .env && \
            echo "CLARITY_PROJECT_ID=${CLARITY_PROJECT_ID}" >> .env && \
            echo "UNBUILT_API_KEY=${UNBUILT_API_KEY}" >> .env && \
            # Extract new build artifacts
            tar -xzf build-artifacts.tar.gz && \
            # Restart the application
            NODE_ENV=production pm2 delete web || true && \
            NODE_ENV=production pm2 start ecosystem.config.cjs --update-env && \
            pm2 save --force && \
            # Clean up
            rm -f build-artifacts.tar.gz