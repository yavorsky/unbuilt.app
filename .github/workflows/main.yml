name: Test, Deploy and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ID: ${{ secrets.SUPABASE_ID }}
      UNBUILT_API_KEY: ${{ secrets.UNBUILT_API_KEY }}
      LOGFLARE_SOURCE_TOKEN: ${{ secrets.LOGFLARE_SOURCE_TOKEN }}
      LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}
      CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install Yarn
        run: npm install -g yarn@1.22.19

      - name: Install dependencies
        run: yarn install

      - name: Install playwright
        run: yarn playwright install --with-deps

      - name: Build application
        run: yarn turbo run build

      - name: Run lint
        run: yarn lint

      - name: Run tests
        run: yarn test
        env:
          NODE_ENV: test

  publish-cli:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install

      - name: Build CLI package
        run: yarn turbo run build --filter=@unbuilt/cli

      - name: Check version change
        id: check-version
        run: |
          # Ensure we're at the repository root
          REPO_ROOT="${GITHUB_WORKSPACE}"
          CLI_PACKAGE_DIR="${REPO_ROOT}/apps/cli"
          CLI_PACKAGE_PATH="${CLI_PACKAGE_DIR}/package.json"
          CLI_PACKAGE_REL_PATH="apps/cli/package.json"

          echo "Using package.json at: ${CLI_PACKAGE_PATH}"

          # Check if file exists
          if [ ! -f "${CLI_PACKAGE_PATH}" ]; then
            echo "Error: CLI package.json not found at ${CLI_PACKAGE_PATH}"
            exit 1
          fi

          # Get current version
          CURRENT_VERSION=$(node -p "require('${CLI_PACKAGE_PATH}').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if this is the first commit or if the file didn't exist before
          if git rev-parse HEAD~1 > /dev/null 2>&1 && git ls-tree -r HEAD~1 --name-only | grep -q "${CLI_PACKAGE_REL_PATH}"; then
            # Create a temporary file for the previous version
            TEMP_FILE=$(mktemp)
            git show HEAD~1:${CLI_PACKAGE_REL_PATH} > "$TEMP_FILE" 2>/dev/null

            # Try to get the previous version
            PREV_VERSION=$(node -p "try { require('$TEMP_FILE').version } catch(e) { '0.0.0' }")
            rm -f "$TEMP_FILE"
          else
            PREV_VERSION="0.0.0"
          fi

          echo "Previous version: $PREV_VERSION"

          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check-version.outputs.version_changed == 'true'
        working-directory: apps/cli
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.check-version.outputs.new_version }}
          release_name: CLI v${{ steps.check-version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            Release of @unbuilt/cli version ${{ steps.check-version.outputs.new_version }}

            ## What's Changed
            * Published CLI package to npm

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ID: ${{ secrets.SUPABASE_ID }}
      UNBUILT_API_KEY: ${{ secrets.UNBUILT_API_KEY }}
      LOGFLARE_SOURCE_TOKEN: ${{ secrets.LOGFLARE_SOURCE_TOKEN }}
      LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}
      CLARITY_PROJECT_ID: ${{ secrets.CLARITY_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: SUPABASE_URL,SUPABASE_KEY,SUPABASE_ID,LOGFLARE_SOURCE_TOKEN,LOGFLARE_API_KEY,CLARITY_PROJECT_ID,UNBUILT_API_KEY
          script: |
            cd /home/server/unbuilt-app && \
            rm -f apps/web/.env && \
            echo "SUPABASE_URL=${SUPABASE_URL}" > apps/web/.env && \
            echo "SUPABASE_KEY=${SUPABASE_KEY}" >> apps/web/.env && \
            echo "SUPABASE_ID=${SUPABASE_ID}" >> apps/web/.env && \
            echo "LOGFLARE_SOURCE_TOKEN=${LOGFLARE_SOURCE_TOKEN}" >> apps/web/.env && \
            echo "LOGFLARE_API_KEY=${LOGFLARE_API_KEY}" >> apps/web/.env && \
            echo "CLARITY_PROJECT_ID=${CLARITY_PROJECT_ID}" >> apps/web/.env && \
            echo "UNBUILT_API_KEY=${UNBUILT_API_KEY}" >> apps/web/.env && \
            git pull origin main && \
            yarn install && \
            NODE_ENV=production yarn turbo run build && \
            pm2 delete web || true && \
            NODE_ENV=production pm2 start ecosystem.config.cjs --update-env && \
            pm2 save --force || \
            { echo "Deployment failed at one of the steps"; exit 1; }