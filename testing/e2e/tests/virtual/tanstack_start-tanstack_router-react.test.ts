import { describe, expect, it } from 'vitest';
import { analyzeVirtualApp } from '../../testkits/virtual/index.js';

const PORT = 4050;

describe.skip('detects tanstack suite (start, router)', async () => {
  const result = await analyzeVirtualApp({
    outDir: 'dist',
    buildCommand: 'vinxi build',
    startCommand: 'vinxi start',
    port: PORT,
    dependencies: {
      '@tanstack/react-router': '1.114.29',
      '@tanstack/react-router-devtools': '1.114.29',
      '@tanstack/react-start': '1.114.30',
      react: '19.0.0',
      'react-dom': '19.0.0',
      redaxios: '0.5.1',
      'tailwind-merge': '2.6.0',
      vinxi: '0.5.3',
      '@types/node': '22.5.4',
      '@types/react': '19.0.8',
      '@types/react-dom': '19.0.3',
      postcss: '8.5.1',
      autoprefixer: '10.4.20',
      tailwindcss: '3.4.17',
      typescript: '5.7.2',
      'vite-tsconfig-paths': '5.1.4',
    },
    packageJson: {
      type: 'module',
    },
    files: {
      'postcss.config.mjs': `
        export default {
          plugins: {
            tailwindcss: {},
            autoprefixer: {},
          },
        }`,
      'tailwind.config.mjs': `
      /** @type {import('tailwindcss').Config} */
      export default {
        content: ['./src/**/*.{js,jsx,ts,tsx}'],
      }`,
      'tsconfig.json': `{
        "include": ["**/*.ts", "**/*.tsx"],
        "compilerOptions": {
          "strict": true,
          "esModuleInterop": true,
          "jsx": "react-jsx",
          "module": "ESNext",
          "moduleResolution": "Bundler",
          "lib": ["DOM", "DOM.Iterable", "ES2022"],
          "isolatedModules": true,
          "resolveJsonModule": true,
          "skipLibCheck": true,
          "target": "ES2022",
          "allowJs": true,
          "forceConsistentCasingInFileNames": true,
          "baseUrl": ".",
          "paths": {
            "~/*": ["./src/*"]
          },
          "noEmit": true
        }
      }`,
      'app.config.ts': `
        import { defineConfig } from '@tanstack/react-start/config'
        import tsConfigPaths from 'vite-tsconfig-paths'

        export default defineConfig({
          tsr: {
            appDirectory: 'src',
          },
          vite: {
            build: {
              rollupOptions: {
                output: {
                  manualChunks: (id) => {
                    // Only process non-external modules
                    if (id.includes('node_modules')) {
                      if (id.includes('@tanstack')) {
                        return 'tanstack-vendor';
                      }
                      // You can add more vendor chunks here if needed
                    }
                },
                },
              },
            },
            server: {
              port: ${PORT},
            },
            plugins: [
              tsConfigPaths({
                projects: ['./tsconfig.json'],
              }),
            ],
          },
        })
      `,
      'src/api.ts': `
        import {
          createStartAPIHandler,
          defaultAPIFileRouteHandler,
        } from '@tanstack/react-start/api'

        export default createStartAPIHandler(defaultAPIFileRouteHandler)
      `,

      'src/client.tsx': `
      /// <reference types="vinxi/types/client" />
      import { hydrateRoot } from 'react-dom/client'
      import { StartClient } from '@tanstack/react-start'
      import { createRouter } from './router'

      const router = createRouter()

      hydrateRoot(document, <StartClient router={router} />)`,
      'src/global-middleware.ts': `
      import { registerGlobalMiddleware } from '@tanstack/react-start'
      import { logMiddleware } from './utils/loggingMiddleware'

      registerGlobalMiddleware({
        middleware: [logMiddleware],
      })
      `,
      'src/routeTree.gen.ts': `
        /* eslint-disable */

      // @ts-nocheck

      // noinspection JSUnusedGlobalSymbols

      // This file was automatically generated by TanStack Router.
      // You should NOT make any changes in this file as it will be overwritten.
      // Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

      // Import Routes

      import { Route as rootRoute } from './routes/__root'
      import { Route as IndexImport } from './routes/index'

      const IndexRoute = IndexImport.update({
        id: '/',
        path: '/',
        getParentRoute: () => rootRoute,
      } as any)

      // Populate the FileRoutesByPath interface

      declare module '@tanstack/react-router' {
        interface FileRoutesByPath {
          '/': {
            id: '/'
            path: '/'
            fullPath: '/'
            preLoaderRoute: typeof IndexImport
            parentRoute: typeof rootRoute
          }
        }
      }

      // Create and export the route tree

      export interface FileRoutesByFullPath {
        '/': typeof IndexRoute
      }

      export interface FileRoutesByTo {
        '/': typeof IndexRoute
      }

      export interface FileRoutesById {
        __root__: typeof rootRoute
        '/': typeof IndexRoute
      }

      export interface FileRouteTypes {
        fileRoutesByFullPath: FileRoutesByFullPath
        fullPaths:
          | '/'
        fileRoutesByTo: FileRoutesByTo
        to:
          | '/'
        id:
          | '__root__'
          | '/'
        fileRoutesById: FileRoutesById
      }

      export interface RootRouteChildren {
        IndexRoute: typeof IndexRoute
      }

      const rootRouteChildren: RootRouteChildren = {
        IndexRoute: IndexRoute,
      }

      export const routeTree = rootRoute
        ._addFileChildren(rootRouteChildren)
        ._addFileTypes<FileRouteTypes>()

      /* ROUTE_MANIFEST_START
      {
        "routes": {
          "__root__": {
            "filePath": "__root.tsx",
            "children": [
              "/",
            ]
          },
          "/": {
            "filePath": "index.tsx"
          },
        }
      }
      ROUTE_MANIFEST_END */
      `,
      'src/router.tsx': `
        import { createRouter as createTanStackRouter } from '@tanstack/react-router'
        import { routeTree } from './routeTree.gen'
        import { DefaultCatchBoundary } from './components/DefaultCatchBoundary'
        import { NotFound } from './components/NotFound'

        export function createRouter() {
          const router = createTanStackRouter({
            routeTree,
            defaultPreload: 'intent',
            defaultErrorComponent: DefaultCatchBoundary,
            defaultNotFoundComponent: () => <NotFound />,
            scrollRestoration: true,
          })

          return router
        }

        declare module '@tanstack/react-router' {
          interface Register {
            router: ReturnType<typeof createRouter>
          }
        }
      `,
      'src/ssr.tsx': `
      /// <reference types="vinxi/types/server" />
      import {
        createStartHandler,
        defaultStreamHandler,
      } from '@tanstack/react-start/server'
      import { getRouterManifest } from '@tanstack/react-start/router-manifest'

      import { createRouter } from './router'

      export default createStartHandler({
        createRouter,
        getRouterManifest,
      })(defaultStreamHandler)
      `,
      'src/components/NotFound.tsx': `
        import { Link } from '@tanstack/react-router'

        export function NotFound({ children }: { children?: any }) {
          return (
            <div className="space-y-2 p-2">
              <div className="text-gray-600 dark:text-gray-400">
                {children || <p>The page you are looking for does not exist.</p>}
              </div>
              <p className="flex items-center gap-2 flex-wrap">
                <button
                  onClick={() => window.history.back()}
                  className="bg-emerald-500 text-white px-2 py-1 rounded uppercase font-black text-sm"
                >
                  Go back
                </button>
                <Link
                  to="/"
                  className="bg-cyan-600 text-white px-2 py-1 rounded uppercase font-black text-sm"
                >
                  Start Over
                </Link>
              </p>
            </div>
          )
        }
      `,
      'src/components/DefaultCatchBoundary.tsx': `
        import {
          ErrorComponent,
          Link,
          rootRouteId,
          useMatch,
          useRouter,
        } from '@tanstack/react-router'
        import type { ErrorComponentProps } from '@tanstack/react-router'

        export function DefaultCatchBoundary({ error }: ErrorComponentProps) {
          const router = useRouter()
          const isRoot = useMatch({
            strict: false,
            select: (state) => state.id === rootRouteId,
          })

          console.error('DefaultCatchBoundary Error:', error)

          return (
            <div className="min-w-0 flex-1 p-4 flex flex-col items-center justify-center gap-6">
              <ErrorComponent error={error} />
              <div className="flex gap-2 items-center flex-wrap">
                <button
                  onClick={() => {
                    router.invalidate()
                  }}
                >
                  Try Again
                </button>
                {isRoot ? (
                  <Link
                    to="/"
                  >
                    Home
                  </Link>
                ) : (
                  <Link
                    to="/"
                    onClick={(e) => {
                      e.preventDefault()
                      window.history.back()
                    }}
                  >
                    Go Back
                  </Link>
                )}
              </div>
            </div>
          )
        }`,
      'src/routes/__root.tsx': `
        import {
          HeadContent,
          Link,
          Outlet,
          Scripts,
          createRootRoute,
        } from '@tanstack/react-router'
        import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
        import * as React from 'react'
        import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
        import { NotFound } from '~/components/NotFound'
        import appCss from '~/styles/app.css?url'
        import { seo } from '~/utils/seo'

      export const Route = createRootRoute({
        head: () => ({
          meta: [
            {
              charSet: 'utf-8',
            },
            {
              name: 'viewport',
              content: 'width=device-width, initial-scale=1',
            },
            ...seo({
              title:
                'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
              description: 'React',
            }),
          ],
          links: [
            { rel: 'stylesheet', href: appCss },
          ],
        }),
        errorComponent: (props) => {
          return (
            <RootDocument>
              <DefaultCatchBoundary {...props} />
            </RootDocument>
          )
        },
        notFoundComponent: () => <NotFound />,
        component: RootComponent,
      })

      function RootComponent() {
        return (
          <RootDocument>
            <Outlet />
          </RootDocument>
        )
      }

      function RootDocument({ children }: { children: React.ReactNode }) {
        return (
          <html>
            <head>
              <HeadContent />
            </head>
            <body>
              <div className="p-2 flex gap-2 text-lg">
                <Link
                  to="/"
                  activeProps={{
                    className: 'font-bold',
                  }}
                  activeOptions={{ exact: true }}
                >
                  Home
                </Link>{' '}
                <Link
                  // @ts-expect-error
                  to="/this-route-does-not-exist"
                  activeProps={{
                    className: 'font-bold',
                  }}
                >
                  This Route Does Not Exist
                </Link>
              </div>
              <hr />
              {children}
              <TanStackRouterDevtools position="bottom-right" />
              <Scripts />
            </body>
          </html>
        )
      }
        `,
      'src/routes/index.tsx': `
          import { createFileRoute } from '@tanstack/react-router'

          export const Route = createFileRoute('/')({
            component: Home,
          })

          function Home() {
            return (
              <div className="p-2">
                <h3>Welcome Home!!!</h3>
              </div>
            )
          }
        `,
      'src/styles/app.css': `
          @tailwind base;
          @tailwind components;
          @tailwind utilities;

          @layer base {
            html {
              color-scheme: light dark;
            }

            * {
              @apply border-gray-200 dark:border-gray-800;
            }

            html,
            body {
              @apply text-gray-900 bg-gray-50 dark:bg-gray-950 dark:text-gray-200;
            }

            .using-mouse * {
              outline: none !important;
            }
          }
        `,
      'src/utils/loggingMiddleware.tsx': `
          import { createMiddleware } from '@tanstack/react-start'

          const preLogMiddleware = createMiddleware()
            .client(async (ctx) => {
              const clientTime = new Date()

              return ctx.next({
                context: {
                  clientTime,
                },
                sendContext: {
                  clientTime,
                },
              })
            })
            .server(async (ctx) => {
              const serverTime = new Date()

              return ctx.next({
                sendContext: {
                  serverTime,
                  durationToServer:
                    serverTime.getTime() - ctx.context.clientTime.getTime(),
                },
              })
            })

          export const logMiddleware = createMiddleware()
            .middleware([preLogMiddleware])
            .client(async (ctx) => {
              const res = await ctx.next()

              const now = new Date()
              console.log('Client Req/Res:', {
                duration: res.context.clientTime.getTime() - now.getTime(),
                durationToServer: res.context.durationToServer,
                durationFromServer: now.getTime() - res.context.serverTime.getTime(),
              })

              return res
            })
        `,
      'src/utils/seo.ts': `
          export const seo = ({
            title,
            description,
            keywords,
            image,
          }: {
            title: string
            description?: string
            image?: string
            keywords?: string
          }) => {
            const tags = [
              { title },
              { name: 'description', content: description },
              { name: 'keywords', content: keywords },
              { name: 'twitter:title', content: title },
              { name: 'og:type', content: 'website' },
              { name: 'og:title', content: title },
              { name: 'og:description', content: description },
              ...(image
                ? [
                    { name: 'twitter:image', content: image },
                    { name: 'twitter:card', content: 'summary_large_image' },
                    { name: 'og:image', content: image },
                  ]
                : []),
            ]

            return tags
          }
        `,
    },
  });

  it('detects tanstack start', async () => {
    expect(result.framework.name).toBe('tanstackStart');
    expect(result.framework.confidence).toBeGreaterThanOrEqual(1);
  });

  it('detects tanstack router', async () => {
    expect(result.router.name).toBe('tanstackRouter');
    expect(result.router.confidence).toBeGreaterThanOrEqual(1);
  });

  it('detects react ui library', async () => {
    expect(result.uiLibrary.name).toBe('react');
    expect(result.uiLibrary.confidence).toBeGreaterThanOrEqual(1);
  });
});
